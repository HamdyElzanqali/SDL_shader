name: Build & Release SDL_shader

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Only needed if you want full SDL windowing on Linux
      # - name: Install build dependencies (Linux)
      #   if: matrix.os == 'ubuntu-latest'
      #   run: sudo apt-get update && sudo apt-get install -y \
      #        libx11-dev libwayland-dev libxkbcommon-dev libdrm-dev

      - name: Configure CMake
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release \
            -DSDL_SHADER_CLI=ON \
            -DSDL_SHADER_LIBRARY=ON \
            -DSDL_OFFSCREEN=ON \
            -DSDL_WAYLAND=OFF \
            -DSDL_X11=OFF \
            -DSDL_RENDER_VULKAN=ON

      - name: Build
        run: cmake --build build --config Release --parallel

      - name: Package CLI
        shell: bash
        run: |
          mkdir -p cli_artifacts
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp build/Release/sdlshader.exe cli_artifacts/
            zip -r sdlshader-${{ matrix.os }}.zip cli_artifacts
          else
            cp build/sdlshader cli_artifacts/
            tar -czf sdlshader-${{ matrix.os }}.tar.gz cli_artifacts
          fi

      - name: Package Library
        shell: bash
        run: |
          mkdir -p lib_artifacts
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp build/Release/SDL_shader.lib lib_artifacts/ || true
            zip -r libSDL_shader-${{ matrix.os }}.zip lib_artifacts
          else
            cp build/libSDL_shader.a lib_artifacts/ || true
            tar -czf libSDL_shader-${{ matrix.os }}.tar.gz lib_artifacts
          fi

      - name: Upload CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdlshader-${{ matrix.os }}
          path: sdlshader-${{ matrix.os }}.*

      - name: Upload Library artifact
        uses: actions/upload-artifact@v4
        with:
          name: libSDL_shader-${{ matrix.os }}
          path: libSDL_shader-${{ matrix.os }}.*

  release:
    name: Publish Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_artifacts/**/* 
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

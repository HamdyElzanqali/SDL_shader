name: Build & Release SDL_shader

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'    # Trigger release build on version tags (e.g., v1.0.0)
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up CMake
        uses: lukka/get-cmake@latest

      - name: Configure build
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release \
            -DSDL_SHADER_CLI=ON \
            -DSDL_SHADER_LIBRARY=ON

      - name: Build
        run: cmake --build build --config Release --parallel

      - name: Prepare CLI binary package
        shell: bash
        run: |
          mkdir -p cli_artifacts
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp build/Release/sdlshader.exe cli_artifacts/
            zip -r sdlshader-${{ matrix.os }}.zip cli_artifacts
          else
            cp build/sdlshader cli_artifacts/
            tar -czf sdlshader-${{ matrix.os }}.tar.gz cli_artifacts
          fi

      - name: Prepare static library package
        shell: bash
        run: |
          mkdir -p lib_artifacts
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp build/Release/SDL_shader.lib lib_artifacts/ || true
          else
            cp build/libSDL_shader.a lib_artifacts/ || true
          fi
          cp -r include lib_artifacts/include
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            zip -r libSDL_shader-${{ matrix.os }}.zip lib_artifacts
          else
            tar -czf libSDL_shader-${{ matrix.os }}.tar.gz lib_artifacts
          fi

      - name: Upload CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdlshader-${{ matrix.os }}
          path: sdlshader-${{ matrix.os }}.*

      - name: Upload Library artifact
        uses: actions/upload-artifact@v4
        with:
          name: libSDL_shader-${{ matrix.os }}
          path: libSDL_shader-${{ matrix.os }}.*

  release:
    name: Publish Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download artifacts from all builds
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_artifacts/**/*  # Upload both CLI and library packages
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
